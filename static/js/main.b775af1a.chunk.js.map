{"version":3,"sources":["styled-components.ts","components/common.ts","AppStyle.ts","components/Multiplayer/style.ts","components/Multiplayer/AvailablePlayers/style.ts","assets/ThreeBallsLoader.svg","components/Multiplayer/AvailablePlayers/AvailablePlayers.tsx","components/Game/Cell/style.ts","components/Game/Cell/Cell.tsx","components/Game/Board/style.ts","components/Game/Board/Board.tsx","components/Game/style.ts","components/Game/Game.tsx","utils/util.ts","assets/BarsLoader.svg","components/Multiplayer/Multiplayer.tsx","App.tsx","components/StartScreen/StartScreen.tsx","index.tsx"],"names":["styledComponents","styled","default","css","createGlobalStyle","keyframes","ThemeProvider","withTheme","EverChanging","transitionProp","levitateText","levitateBox","LevitateBoxAnimation","LevitateTextAnimation","whiteTextAndBlackBackground","blackTextAndWhiteBackground","BasicButton","withConfig","displayName","componentId","_ref","whiteTextBlackBg","concat","_ref2","levitate","_ref3","isClicked","_ref4","BasicInputField","_ref5","_ref6","placeholderColor","_ref7","_ref8","_ref9","FlexDiv","_ref10","height","_ref11","width","_ref12","cssStyle","_ref13","fitContainer","_ref14","FlexColumnDiv","_ref15","Hcenter","_ref16","Vcenter","FlexRowDiv","_ref17","_ref18","FlexColumnContainer","CenteringDiv","attrs","ColoredText","_ref19","color","_ref20","block","_ref21","bold","_ref22","size","deviceSizes","desktop","tablet","phone","media","reduce","acc","label","templateStrings","GlobalStyle","_templateObject","Theme","primaryColor","primaryColorInverted","bgColor","playerOneColor","playerTwoColor","AppWrapper","cs","CloseButton","PopUpContainer","PopUp","_templateObject2","MultiPlayer","MultiPlayerWrapper","AvailablePlayersAndRequestsContainer","style_templateObject","JoiningForm","NameInput","AvailablePlayersContainer","AvailablePlayer","props","isSelected","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","ThreeBallsLoader_ref","react_default","a","createElement","cx","cy","r","attributeName","from","to","begin","dur","values","calcMode","repeatCount","fillOpacity","ThreeBallsLoader_SvgComponent","viewBox","fill","AvailablePlayers","__webpack_require__","p","availablePlayers","handleAvailablePlayerClick","selectedAvailablePlayer","Fragment","map","player","onClick","socketID","disabled","name","Cell","isInWinningPosition","handlePlayerMove","cellValue","Board","Overlay","waitForOpponentMove","Row","div","renderCell","cellID","_this","boardState","gameResult","resultType","winningCellPositions","includes","Game_Cell_Cell","_this$props","style_Board","React","Component","PlayerSymbol","PlayerType","Game","Game_style_templateObject","History","style_templateObject2","Move","classCallCheck","possibleConstructorReturn","getPrototypeOf","togglePlayer","Player1","Player2","getSymbolOfPlayer","state","symbol","recordMoveInHistory","newBoardState","nextPlayer","_this$state","history","moveInHistory","historyTillNow","Map","currMoveNo","newHistory","set","setState","moveBySelf","currentPlayer","_this$state2","symbolOfCurrPlayer","gameMode","GameMode","sendPlayerMoveCellIDToOpponent","slice","result","checkForWinDrawNeither","lines","_lines$i","slicedToArray","cellA","cellB","cellC","winningPlayer","winningSymbol","checkForDraw","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","goBackToMove","moveNum","playBySelf","prevGameState","get","Array","sendRestartSignalToOpponent","player1Name","isSelfPlayer1","selfName","opponentName","player2Name","selfPlayerType","opponentPlayerType","X","O","colorForSelf","theme","colorForOpponent","gameStatusMessage","_this2","_this$state3","symbolOfSelf","style_Game","Game_Board_Board","keys","StandardHTMLColorNames","colorNameGenerator","regenerator_default","mark","_callee","wrap","_context","prev","stop","ChangeColors","timeInMs","_len","elementRefs","_key","elementRef","setInterval","current","style","backgroundColor","setColor","BarsLoader_extends","TextMessageTypes","BarsLoader_ref","y","rx","BarsLoader_ref2","x","BarsLoader_ref3","BarsLoader_SvgComponent","Multiplayer","basicButtonRef","createRef","nameInputRef","multiPlayerRef","gameComponentChild","defaultPlaceholder","onErrorPlaceholder","isInitiator","sendQueue","dataChannel","handleInputChange","event","_event$currentTarget","currentTarget","currentOutgoingTextMessage","handleEnter","outgoingTextMessage","type","OutgoingTextMessage","sendDataToRemotePeer","handleJoinRoomClick","handleSendTextMessageButton","socket","io","socketServerAddress","path","on","console","log","connected","registerToSocketEvents","emit","response","resp","code","isInAvailablePlayersRoom","showPopUp","Error","message","window","location","hostname","match","placeholderForPlayerNameEle","playerThatRejected","peerConn","close","ipaddr","msg","offer","remotePlayerName","remotePlayerSocketID","JSON","stringify","peerSignal","candidate","prevState","requestsFromPlayers","processSignalFromRemotePeer","signal","answer","reason","sendOfferToRemotePeerViaSignallingServer","sendCandidateToRemotePeerViaSignallingServer","sendAnswerToRemotePeerViaSignallingServer","asyncToGenerator","callerSessionDescription","localSessionDesc","calleeSessionDescription","iceCandidate","t0","RTCSessionDescription","setRemoteDescription","createAnswer","sent","setLocalDescription","localDescription","t1","abrupt","t2","RTCIceCandidate","addIceCandidate","t3","_x","handleICECandidateEvent","candidateSignal","toJSON","handleNegotiationNeededEvent","_callee2","localSessionDescription","_context2","createOffer","createPeerConnection","config","RTCPeerConnection","onicecandidate","onnegotiationneeded","createDataChannel","onDataChannelCreated","forceUpdate","ondatachannel","channel","onopen","onerror","onclose","allTextMessages","onmessage","evt","payload","parse","data","IncomingTextMessage","invitePlayer","availablePlayer","sendRejectionResponseToPeers","peersToReject","acceptPeerRequest","selectedPeerSocketID","filter","readyState","push","send","shift","playerMoveCellID","handleQuitMatchAndGoBackToAvailablePool","showViewBasedOnDataChannelState","showGameAndChat","components_Game_Game","ref","showAvailablePlayers","availablePlayersExceptSelf","id","Multiplayer_AvailablePlayers_AvailablePlayers","showRequestsFromPlayers","process","setIntervalIds","utils","forEach","intervalID","clearInterval","showJoiningForm","isConnectedWithOpponent","autoFocus","placeholder","onKeyUp","onChange","StartScreen","centeringDivRef","basicButtonARef","basicButtonBRef","gameModeSelectionButtonHandler","SinglePlayer","App","popUpValue","closePopUp","mode","showViewBasedOnGameMode","components_Multiplayer_Multiplayer","StartScreen_StartScreen","popUpView","s","ReactDOM","render","src_App","document","getElementById"],"mappings":"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,OACA,aACA,QACA,QACA,SACA,iBACA,OACA,aACA,QACA,YACA,YACA,aACA,YACA,QACA,iBACA,WACA,UACA,OACA,WACA,WACA,gBACA,WACA,WACA,YACA,YACA,cACA,iBACA,aACA,aACA,UACA,aACA,eACA,gBACA,gBACA,gBACA,gBACA,aACA,WACA,cACA,UACA,UACA,aACA,YACA,cACA,cACA,UACA,YACA,aACA,OACA,YACA,OACA,OACA,QACA,cACA,WACA,UACA,aACA,UACA,QACA,QACA,WACA,gBACA,YACA,eACA,YACA,aACA,YACA,uBACA,YACA,YACA,aACA,YACA,cACA,gBACA,eACA,iBACA,iBACA,iBACA,cACA,OACA,YACA,QACA,UACA,SACA,mBACA,aACA,eACA,eACA,iBACA,kBACA,oBACA,kBACA,kBACA,eACA,YACA,YACA,WACA,cACA,OACA,UACA,QACA,YACA,SACA,YACA,SACA,gBACA,YACA,gBACA,gBACA,aACA,YACA,OACA,OACA,OACA,aACA,SACA,gBACA,MACA,YACA,YACA,cACA,SACA,aACA,WACA,WACA,SACA,SACA,UACA,YACA,YACA,YACA,OACA,cACA,YACA,MACA,OACA,UACA,SACA,YACA,SACA,QACA,aACA,SACA,eAGIC,GAAqBC,EAAA5I,EAAA6I,KAAC,SAAAC,IAAA,IAAA1J,EAAA,OAAAwJ,EAAA5I,EAAA+I,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAArC,MAAA,OACtBvH,EAAI,EADkB,YAEnBA,EAAIsJ,GAAuBpJ,QAFR,CAAA0J,EAAArC,KAAA,QAGxB,OAHwBqC,EAAArC,KAAA,EAGlB+B,GAAuBtJ,GAHL,QAIxBA,GAAK,KACKsJ,GAAuBpJ,SAC/BF,EAAI,GANkB4J,EAAArC,KAAA,gCAAAqC,EAAAE,SAAAJ,EAAAjJ,OAAD+I,GAiBdO,GACX,SAACC,GAAD,QAAAC,EAAAhK,UAAAC,OAAsBgK,EAAtB,IAAAjC,MAAAgC,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAsBD,EAAtBC,EAAA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","file":"static/js/main.b775af1a.chunk.js","sourcesContent":["import * as styledComponents from \"styled-components\";\nimport { ThemedStyledComponentsModule } from \"styled-components\";\nimport ThemeInterface from \"./theme\";\n\nconst {\n  default: styled,\n  css,\n  createGlobalStyle,\n  keyframes,\n  ThemeProvider,\n  withTheme\n} = styledComponents as ThemedStyledComponentsModule<ThemeInterface>;\n\nexport { css, createGlobalStyle, keyframes, ThemeProvider, withTheme};\nexport default styled;","import styled, {keyframes, css} from '../styled-components'\nimport { PlayerType } from './Game/Game';\n\nexport const EverChanging = (transitionProp : string) => css`\n  transition-property: ${transitionProp};\n  transition-duration: 1s;\n  transition-delay: 0s;\n  transition-timing-function: ease-in-out;\n`\n\nconst levitateText = keyframes`\n  0% {\n    text-shadow: 1px 5px 10px black;\n  }\n  50% {\n    text-shadow: 1px 2px 5px black;\n  }\n  100% {\n    text-shadow: 1px 5px 10px black;\n  }\n`\n\nconst levitateBox = keyframes`\n  0% {\n    box-shadow: 8px 10px 20px gray;\n  }\n  50% {\n    box-shadow: 3px 4px 7px gray;\n  }\n  100% {\n    box-shadow: 8px 10px 20px gray;\n  }\n`\n\nexport const LevitateBoxAnimation = css`\n  animation-name: ${levitateBox};\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n  animation-timing-function: linear;\n`\n\nexport const LevitateTextAnimation = css`\n  animation-name: ${levitateText};\n  animation-duration: 2s;\n  animation-iteration-count: infinite;\n  animation-timing-function: linear;\n`\n\nconst whiteTextAndBlackBackground = css`\n  background-color: black;\n  color: white;\n`\n\nconst blackTextAndWhiteBackground = css`\n  background-color: white;\n  color: black;\n`\n\nexport const BasicButton = styled<{transitionProp?:string, whiteTextBlackBg?: boolean, levitate?: boolean, isClicked?: boolean}, \"button\">(\"button\")`\n  padding: 10px;\n  font-size: 1em;\n  font-weight: bold;\n  border: 2px solid black;\n  border-radius: 20px;\n  cursor: pointer;\n  outline: none;  \n  ${blackTextAndWhiteBackground};\n  :active {\n    ${whiteTextAndBlackBackground};\n  };\n  ${({whiteTextBlackBg}) => whiteTextBlackBg && `\n    ${whiteTextAndBlackBackground};\n    :active {\n      ${blackTextAndWhiteBackground}\n    }\n  `};\n  ${({levitate}) => levitate && LevitateBoxAnimation};\n  ${({isClicked}) => isClicked && whiteTextAndBlackBackground};\n  ${({transitionProp}) => transitionProp && EverChanging(transitionProp)};\n`\n\nexport const BasicInputField = styled<{transitionProp?:string, levitate?: boolean, placeholderColor?: string}, \"input\">(\"input\")`\n  padding: 5px;\n  font-size: 1em;\n  font-weight: bold;\n  border-radius: 10px;\n  border: 2px solid black;\n  outline: none;\n  ${({levitate}) => levitate && LevitateBoxAnimation};\n  ::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\n    color: ${({placeholderColor}) => placeholderColor};\n    opacity: 1; /* Firefox */\n  };\n  :-ms-input-placeholder { /* Internet Explorer 10-11 */\n      color: ${({placeholderColor}) => placeholderColor};\n  };\n\n  ::-ms-input-placeholder { /* Microsoft Edge */\n      color: ${({placeholderColor}) => placeholderColor};\n  };\n  ${({transitionProp}) => transitionProp && EverChanging(transitionProp)};\n`;\n\nconst FlexDiv = styled<{fitContainer?: boolean, transitionProp?: string, height?: string, width?: string, cssStyle?: string}, \"div\">(\"div\")`\n  display: flex;\n  ${({height}) => height && `height: ${height}`};\n  ${({width}) => width && `width: ${width}`};\n  ${({cssStyle}) => cssStyle && `${cssStyle}`};\n  ${({fitContainer}) => fitContainer && `\n  width: 100%;\n  height: 100%;\n  `};\n  ${({transitionProp}) => transitionProp && EverChanging(transitionProp)};\n`\n\nexport const FlexColumnDiv = styled(FlexDiv)<{Hcenter?: boolean, Vcenter?: boolean}>`\n  flex-direction: column;\n  ${({Hcenter}) => Hcenter && `align-items: center`};\n  ${({Vcenter}) => Vcenter && `justify-content: center`};\n`\n\nexport const FlexRowDiv = styled(FlexDiv)<{Hcenter?: boolean, Vcenter?: boolean}>`\n  flex-direction: row;\n  ${({Hcenter}) => Hcenter && `justify-content: center`};\n  ${({Vcenter}) => Vcenter && `align-items: center`};\n`\n\nexport const FlexColumnContainer = styled(FlexColumnDiv)`\n  padding: 15px;\n  border-radius: 10px;\n  border: 2px solid black;\n`;\n\n\nexport const FlexRowContainer = styled(FlexRowDiv)`\n  padding: 15px;\n  border-radius: 10px;\n  border: 2px solid black;\n`;\n\nexport const CenteringDiv = styled(FlexColumnDiv).attrs({\n  Hcenter: true,\n  Vcenter: true,\n})`\n`\n\nexport const ColoredText = styled<{block?: boolean, size?: string, color?: string, bold?: boolean}, \"span\">(\"span\")`\n  text-align: center;\n  color: ${({color}) => color};\n  display: ${({block}) => block && \"block\"};\n  font-weight: ${({bold}) => bold && \"bold\"};\n  font-size: ${({size}) => size ? `${size}` : \"1.5em\"};\n`;\n\ntype DeviceType = \"desktop\" | \"tablet\" | \"phone\"\ntype Media = {[device in DeviceType]: Function}\n\nconst deviceSizes: {[device in DeviceType]: number} = {\n  desktop: 992,\n  tablet: 768,\n  phone: 576,\n}\n\nconst devices: Array<DeviceType> = [\"desktop\", \"phone\", \"tablet\"]\n\n// Iterate through the sizes and create a media template\nexport const media = devices.reduce((acc, label) => {\n  acc[label] = (templateStrings: TemplateStringsArray) => css`\n    @media (max-width: ${deviceSizes[label] / 16}em) {\n      ${css(templateStrings)}\n    }\n  `\n\n  return acc\n}, {} as Media)","import styled, {createGlobalStyle} from './styled-components';\nimport * as cs from './components/common';\nimport ThemeInterface from './theme';\n\nexport const GlobalStyle = createGlobalStyle`\n  @import url(\"https://fonts.googleapis.com/css?family=Montserrat:400,900|Roboto\");\n\n  body {\n    padding: 0;\n    margin: 0;\n    font-family: Roboto, sans-serif;\n  }\n`;\n\nexport const Theme: ThemeInterface = {\n  primaryColor: \"white\", \n  primaryColorInverted: \"black\", \n  bgColor: \"white\",\n  playerOneColor: \"red\",\n  playerTwoColor: \"blue\"\n}\n\nexport const AppWrapper = styled(cs.FlexColumnDiv)`\n  height: 100vh;\n  width: 100vw;\n  position: relative;\n`;\n\nexport const CloseButton = styled(cs.BasicButton)`\n  position: absolute;\n  right: 10px;\n  top: 10px;\n  border-radius: 100%;\n`\n\nexport const PopUpContainer = styled(cs.CenteringDiv).attrs({\n  fitContainer: true,\n})`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  z-index: 1;\n  background-color: rgba(0, 0, 0, 0.3);\n`\n\nexport const PopUp = styled(cs.CenteringDiv)`\n  text-align: center;\n  width: 30%;\n  height: 30%;\n  border-radius: 20px;\n  background-color: black;\n  position: relative;\n  padding: 10px;\n  ${cs.media.phone`\n  width: 70%;\n  height: 40%;\n  `};\n`","import styled, {css} from '../../styled-components';\nimport * as cs from '../common'\n\nexport const MultiPlayer = styled(cs.CenteringDiv).attrs({\n  fitContainer: true,\n  transitionProp: \"background-color\"\n})`\n`;\n\nexport const MultiPlayerWrapper = styled(cs.FlexColumnDiv).attrs({\n  Hcenter: true,\n})`\n  max-width: 100%;\n`;\n\nexport const AvailablePlayersAndRequestsContainer = styled(cs.FlexRowDiv)`\n  align-items: center;\n  ${cs.media.phone`\n  flex-direction: column;\n  `};\n`\n\nexport const JoiningForm = styled(cs.FlexRowDiv)``\n\nexport const NameInput = styled(cs.BasicInputField).attrs({\n  levitate: true,\n  placeholderColor: \"black\",\n  transitionProp: \"background-color\",\n})`\n  margin: 0 10px 0 10px;\n`;\n\n\n\n\n","import styled, {css} from \"../../../styled-components\";\nimport * as cs from '../../common'\n\nexport const AvailablePlayersContainer = styled(cs.FlexRowDiv).attrs({\n  Vcenter: true\n})`\n  flex-wrap: wrap;\n  margin: 10px;\n`;\n\nexport const AvailablePlayer = styled(cs.BasicButton).attrs({\n  whiteTextBlackBg: true,\n  levitate: (props: any) => props.isSelected === null ? true : props.isSelected === true ? true : false\n})<{isSelected: boolean | null}> `\n  margin: 7px;\n  align-self: flex-start;\n  ${({isSelected}) => isSelected === null ? `` : isSelected === true ? `\n    box-shadow: 8px 10px 20px gray;\n    font-size: 1.5em;\n  `\n  : `\n    box-shadow: 3px 4px 7px gray;\n    cursor: not-allowed;\n  `\n  };\n`;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(\"circle\", {\n  cx: 15,\n  cy: 15,\n  r: 15\n}, React.createElement(\"animate\", {\n  attributeName: \"r\",\n  from: 15,\n  to: 15,\n  begin: \"0s\",\n  dur: \"0.8s\",\n  values: \"15;9;15\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}), React.createElement(\"animate\", {\n  attributeName: \"fill-opacity\",\n  from: 1,\n  to: 1,\n  begin: \"0s\",\n  dur: \"0.8s\",\n  values: \"1;.5;1\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}));\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"circle\", {\n  cx: 60,\n  cy: 15,\n  r: 9,\n  fillOpacity: 0.3\n}, React.createElement(\"animate\", {\n  attributeName: \"r\",\n  from: 9,\n  to: 9,\n  begin: \"0s\",\n  dur: \"0.8s\",\n  values: \"9;15;9\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}), React.createElement(\"animate\", {\n  attributeName: \"fill-opacity\",\n  from: 0.5,\n  to: 0.5,\n  begin: \"0s\",\n  dur: \"0.8s\",\n  values: \".5;1;.5\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}));\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"circle\", {\n  cx: 105,\n  cy: 15,\n  r: 15\n}, React.createElement(\"animate\", {\n  attributeName: \"r\",\n  from: 15,\n  to: 15,\n  begin: \"0s\",\n  dur: \"0.8s\",\n  values: \"15;9;15\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}), React.createElement(\"animate\", {\n  attributeName: \"fill-opacity\",\n  from: 1,\n  to: 1,\n  begin: \"0s\",\n  dur: \"0.8s\",\n  values: \"1;.5;1\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}));\n\nvar SvgComponent = function SvgComponent(props) {\n  return React.createElement(\"svg\", _extends({\n    width: 120,\n    height: 30,\n    viewBox: \"0 0 120 30\",\n    fill: \"black\"\n  }, props), _ref, _ref2, _ref3);\n};\n\nexport default __webpack_public_path__ + \"static/media/ThreeBallsLoader.a536838e.svg\";\nexport { SvgComponent as ReactComponent };","import React from 'react'\nimport * as cs from '../../common'\nimport * as s from './style'\nimport { AvailablePlayer } from '../Multiplayer';\nimport {ReactComponent as ThreeBallsLoader} from '../../../assets/ThreeBallsLoader.svg'\n\ninterface Props {\n  availablePlayers: Array<AvailablePlayer>\n  selectedAvailablePlayer: AvailablePlayer | null\n  handleAvailablePlayerClick: (availablePlayer: AvailablePlayer) => void\n}\n\nconst AvailablePlayers = ({availablePlayers, handleAvailablePlayerClick, selectedAvailablePlayer}: Props) => {\n  return (\n    <React.Fragment>\n      {\n        availablePlayers.length ?\n        <cs.FlexColumnDiv Hcenter>\n          <cs.FlexRowDiv Vcenter cssStyle=\"margin-left: 10px; margin-right: 10px;\">\n            <cs.ColoredText bold>Available players:</cs.ColoredText>\n            <s.AvailablePlayersContainer>{\n              availablePlayers.map(player => \n                <s.AvailablePlayer \n                  onClick={() => handleAvailablePlayerClick(player)} \n                  key={player.socketID}\n                  isSelected={selectedAvailablePlayer && selectedAvailablePlayer.socketID === player.socketID}\n                  disabled={selectedAvailablePlayer ? selectedAvailablePlayer.socketID !== player.socketID : false}\n                >\n                {player.name}\n                </s.AvailablePlayer>\n              )\n            }</s.AvailablePlayersContainer>\n          </cs.FlexRowDiv>\n          {selectedAvailablePlayer ? null : <cs.ColoredText bold>Select a player to play with!!!</cs.ColoredText>}\n        </cs.FlexColumnDiv> \n        :\n        <cs.FlexColumnDiv Hcenter>\n          <ThreeBallsLoader width=\"100\" height=\"100\"/>\n          <cs.ColoredText bold>There are no free players right now, please wait for some time...</cs.ColoredText>\n        </cs.FlexColumnDiv>\n      }\n    </React.Fragment>\n  )\n}\n\nexport default AvailablePlayers","import styled, {css} from '../../../styled-components';\nimport { LevitateTextAnimation } from '../../common';\n\n// You will need to define both the custom props and the type of tag which will be used.\nexport const Cell = styled<{ isInWinningPosition: boolean }, \"button\">(\"button\")`\n  cursor: pointer;\n  width: 100px;\n  height: 100px;\n  border: 2px solid black;\n  outline: none;\n  font-size: 3em;\n  background-color: white;\n  ${LevitateTextAnimation};\n  ${({isInWinningPosition}) => isInWinningPosition && css`\n    background-color: green;\n    color: white;\n  `\n  };\n`;","import React from 'react';\nimport * as s from './style'\n\nexport interface Props {\n  handlePlayerMove: () => void\n  cellValue: string\n  isInWinningPosition: boolean\n}\n\nfunction Cell(props: Props) {\n  return (\n    <s.Cell \n      onClick={props.handlePlayerMove} \n      isInWinningPosition={props.isInWinningPosition}\n    >\n    {props.cellValue}\n    </s.Cell>\n  )\n}\n\nexport default Cell;","import styled from '../../../styled-components';\nimport * as cs from '../../common'\n\nexport const Board = styled(cs.FlexColumnDiv)`\n  position: relative;\n  margin: 15px;\n`;\n\nexport const Overlay = styled(cs.CenteringDiv).attrs({\n  fitContainer: true\n})<{waitForOpponentMove: boolean}>`\n  display: none;\n  ${({waitForOpponentMove}) => waitForOpponentMove && `\n  display: flex;\n  background-color: rgba(0, 0, 0, 0.3);\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  `};\n`\n\nexport const Row = styled.div`\n  display: flex;\n`;","import React from 'react'\nimport Cell from '../Cell/Cell'\nimport * as s from './style'\nimport { BoardState, GameResult } from '../Game';\nimport {ReactComponent as ThreeBallsLoader} from '../../../assets/ThreeBallsLoader.svg';\n\ninterface Props {\n  gameResult: GameResult\n  waitForOpponentMove: boolean\n  boardState: BoardState\n  handlePlayerMove: (cellID: number, moveBySelf: boolean) => void\n}\n\nclass Board extends React.Component<Props, {}> {\n\n  renderCell = (cellID: number) => {\n    const cellValue = this.props.boardState[cellID]\n    let isInWinningPosition = false\n    if (this.props.gameResult.resultType === \"win\") {\n      isInWinningPosition = this.props.gameResult.winningCellPositions.includes(cellID)\n    }\n    return (\n      <Cell \n        handlePlayerMove={() => this.props.handlePlayerMove(cellID, true)} \n        cellValue={cellValue} \n        isInWinningPosition={isInWinningPosition}\n      />\n    )\n  }\n\n  render() {\n    const {gameResult, waitForOpponentMove} = this.props\n    return (\n      <s.Board>\n        <s.Overlay waitForOpponentMove={waitForOpponentMove}>\n          <ThreeBallsLoader width=\"140\" height=\"50\" fill=\"white\"/>\n        </s.Overlay>\n        <s.Row>\n          {this.renderCell(0)}\n          {this.renderCell(1)}\n          {this.renderCell(2)}\n        </s.Row>\n        <s.Row>\n          {this.renderCell(3)}\n          {this.renderCell(4)}\n          {this.renderCell(5)}\n        </s.Row>\n        <s.Row>\n          {this.renderCell(6)}\n          {this.renderCell(7)}\n          {this.renderCell(8)}\n        </s.Row>\n      </s.Board>\n    );\n  }\n}\n\nexport default Board;","import styled, {css} from 'styled-components';\nimport * as cs from '../common'\n\nexport const Game = styled(cs.FlexRowDiv)`\n  max-width: 100%;\n  align-items: center;\n  ${cs.media.phone`\n    flex-direction: column;\n  `}\n`;\n\nexport const History = styled(cs.FlexColumnDiv)`\n  margin-left: 30px;\n  ${cs.media.phone`\n    flex-direction: row;\n    max-width: 100%;\n    overflow: scroll;\n    margin-left: 0px;\n  `}\n`;\n\nexport const Move = styled.div`\n  margin: 20px;\n`;","import React from 'react';\nimport Board from './Board/Board';\nimport * as s from './style'\nimport * as cs from '../common';\nimport { GameMode } from '../../App';\nimport {withTheme} from '../../styled-components'\nimport ThemeInterface from '../../theme';\n\nexport enum PlayerSymbol {\n  X = \"X\",\n  O = \"O\",\n}\ninterface PlayerInfo {\n  name: string\n  symbol: PlayerSymbol\n}\n\n// When all members in an enum have literal values, special semantics come into play.\n// 1. First is that enum members become types as well.\n// 2. Second is that the enum type effectively becomes the union of each enum member.\nexport enum PlayerType {\n  Player1 = \"Player1\", // Player1 is an enum member which has a constant value \"Player1\" associated with it, a constant enum member.\n  Player2 = \"Player2\",\n}\n\nexport type BoardState = Array<PlayerSymbol>\n\ninterface GameState {\n  nextPlayer: PlayerType\n  boardState: BoardState\n}\n\ntype GameHistory = Map<number, GameState>\n\nexport type GameResult = WinningResult | DrawResult | NeitherResult\ninterface DrawResult {\n  resultType: \"draw\"\n}\n\ninterface NeitherResult {\n  resultType: \"neither\"\n}\n\ninterface WinningResult {\n  resultType: \"win\"\n  winningPlayer: PlayerType\n  winningSymbol: PlayerSymbol\n  winningCellPositions: Array<number>\n}\n\ninterface State {\n  selfName: string\n  opponentName: string\n  selfPlayerType: PlayerType\n  opponentPlayerType: PlayerType\n  Player1: PlayerInfo\n  Player2: PlayerInfo\n  nextPlayer: PlayerType\n  boardState: BoardState\n  moveInHistory: number | null\n  history: GameHistory\n  gameResult: GameResult\n  gameMode: GameMode\n}\n\ninterface Props {\n  gameMode: GameMode\n  isSelfPlayer1: boolean\n  selfName: string\n  opponentName: string\n  sendPlayerMoveCellIDToOpponent?: (cellID: number) => void\n  sendRestartSignalToOpponent?: () => void\n  theme: ThemeInterface\n}\n\nclass Game extends React.Component<Props, State> {\n\n  colorForSelf: string\n  colorForOpponent: string\n\n  constructor(props: Props) {\n    super(props)\n    const player1Name = props.isSelfPlayer1 ? props.selfName : props.opponentName\n    const player2Name = player1Name === props.selfName ? props.opponentName : props.selfName\n    const selfPlayerType = props.isSelfPlayer1 ? PlayerType.Player1 : PlayerType.Player2\n    const opponentPlayerType = selfPlayerType === PlayerType.Player1 ? PlayerType.Player2 : PlayerType.Player1\n    const gameResult: NeitherResult = {resultType: \"neither\"}\n    this.state = {\n      gameMode: props.gameMode,\n      selfName: props.selfName,\n      opponentName: props.opponentName,\n      selfPlayerType,\n      opponentPlayerType,\n      Player1: {name: player1Name, symbol: PlayerSymbol.X}, \n      Player2: {name: player2Name, symbol: PlayerSymbol.O},\n      nextPlayer: PlayerType.Player1,\n      boardState: Array(9).fill(null),\n      moveInHistory: null,\n      history: new Map(),\n      gameResult,\n    }\n    this.colorForSelf = props.isSelfPlayer1 ? props.theme.playerOneColor : props.theme.playerTwoColor\n    this.colorForOpponent =  this.colorForSelf === props.theme.playerOneColor ? props.theme.playerTwoColor : props.theme.playerOneColor\n  }\n\n  togglePlayer = (player: PlayerType) : PlayerType => {\n    if (player === PlayerType.Player1) {\n      return PlayerType.Player2\n    }\n    return PlayerType.Player1\n  }\n\n  getSymbolOfPlayer = (player: PlayerType) : PlayerSymbol => {\n    const symbolOfPlayer = this.state[player].symbol\n    return symbolOfPlayer\n  }\n\n  recordMoveInHistory = (newBoardState: BoardState, nextPlayer: PlayerType) => {\n    const {history, moveInHistory} = this.state\n    const historyTillNow = new Map(history)\n    if (moveInHistory !== null) {\n      const currMoveNo = moveInHistory + 1\n      const newHistory = historyTillNow.set(currMoveNo, {nextPlayer, boardState: newBoardState})\n      this.setState({\n        history: newHistory,\n        moveInHistory: null\n      })\n      return\n    }\n  \n    const currMoveNo = historyTillNow.size + 1\n    const newHistory = historyTillNow.set(currMoveNo, {nextPlayer, boardState: newBoardState})\n    this.setState({\n      history: newHistory\n    })\n  }\n\n\n  handlePlayerMove = (cellID: number, moveBySelf: boolean) => {\n\n    const currentPlayer = this.state.nextPlayer\n    \n    const {boardState, gameResult} = this.state\n    \n    const symbolOfCurrPlayer = this.getSymbolOfPlayer(currentPlayer)\n    \n    if (boardState[cellID] !== null || gameResult.resultType === \"win\") {\n      return\n    }\n\n    if (moveBySelf && this.state.gameMode === GameMode.MultiPlayer) {\n      this.props.sendPlayerMoveCellIDToOpponent!(cellID)\n    }\n    \n    const newBoardState = boardState.slice()\n    \n    newBoardState[cellID] = symbolOfCurrPlayer\n\n    const result = this.checkForWinDrawNeither(newBoardState, currentPlayer)\n\n    const nextPlayer = this.togglePlayer(currentPlayer)\n\n    this.setState({boardState: newBoardState, nextPlayer, gameResult: result})\n\n    this.recordMoveInHistory(newBoardState, nextPlayer)\n  }\n\n  checkForWinDrawNeither = (boardState: BoardState, currentPlayer: PlayerType) : GameResult => {\n    const lines = [\n      [0, 1, 2],[3, 4, 5],[6, 7, 8],[0, 3, 6],[1, 4, 7],[2, 5, 8],[0, 4, 8],[2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [cellA, cellB, cellC] = lines[i]\n      if (boardState[cellA] && boardState[cellA] === boardState[cellB] && boardState[cellA] === boardState[cellC]) {\n        const gameResult: WinningResult = {\n          resultType: \"win\",\n          winningPlayer: currentPlayer, \n          winningSymbol: boardState[cellA], \n          winningCellPositions: lines[i]\n        }\n        return gameResult\n      }\n    }\n    const gameIsADraw = this.checkForDraw(boardState)\n    if (gameIsADraw) {\n      const drawResult: DrawResult = {resultType: \"draw\"} \n      return drawResult\n    } else {\n      const neitherResult: NeitherResult = {resultType: \"neither\"}\n      return neitherResult\n    }\n  }\n\n  checkForDraw = (boardState: BoardState): boolean => {\n    let gameIsADraw: boolean\n    for (const cellValue of boardState) {\n      if (cellValue === null) {\n        gameIsADraw = false\n        return gameIsADraw\n      }\n    }\n    gameIsADraw = true\n    return gameIsADraw\n  }\n\n  goBackToMove = (moveNum: number, playBySelf: boolean) => {\n    if (moveNum !== 0) {\n      const prevGameState = this.state.history.get(moveNum) as GameState\n      const {boardState, nextPlayer} = prevGameState\n      const currentPlayer = this.togglePlayer(nextPlayer)\n      const gameResult = this.checkForWinDrawNeither(boardState, currentPlayer)\n      this.setState({\n        boardState, nextPlayer, moveInHistory: moveNum, gameResult\n      })\n    } else {\n      const gameResult: NeitherResult = {resultType: \"neither\"}\n      this.setState({\n        boardState: Array(9).fill(null), history: new Map(), moveInHistory: null, \n        nextPlayer: PlayerType.Player1, gameResult\n      })\n      if (playBySelf && this.state.gameMode === GameMode.MultiPlayer) {\n        this.props.sendRestartSignalToOpponent!()\n      }\n    }\n  }\n\n  render() {\n    // nextPlayer is the player that is gonna play now.\n    const {selfName, nextPlayer, boardState, history, moveInHistory, gameResult, opponentName, selfPlayerType, opponentPlayerType} = this.state\n    const symbolOfSelf = this.getSymbolOfPlayer(selfPlayerType)\n    let gameStatusMessage;\n    let waitForOpponentMove = false;\n    switch (gameResult.resultType) {\n      case \"draw\":\n        gameStatusMessage = <cs.ColoredText>This game a mothafucking draw!</cs.ColoredText>\n        break;\n\n      case \"win\":\n        const didSelfWin = gameResult.winningPlayer === selfPlayerType\n        if (didSelfWin) {\n          gameStatusMessage = <cs.ColoredText bold>You <cs.ColoredText bold>won</cs.ColoredText> the match!</cs.ColoredText>\n        } else {\n          gameStatusMessage = <cs.ColoredText bold>You <cs.ColoredText bold>lost</cs.ColoredText> the match!</cs.ColoredText>\n        }\n        break;\n\n      case \"neither\":\n        waitForOpponentMove = nextPlayer === opponentPlayerType\n        if (waitForOpponentMove) {\n          gameStatusMessage = <cs.ColoredText bold>Waiting for <cs.ColoredText color={this.colorForOpponent} bold>{opponentName}</cs.ColoredText> to make a move...</cs.ColoredText> \n        } else {\n          gameStatusMessage = <cs.ColoredText bold>Make a move!!</cs.ColoredText>\n        }\n        break;\n    \n      default:\n        break;\n    }\n    return (\n      <s.Game>\n        <cs.FlexColumnDiv Hcenter>\n          <cs.ColoredText bold>\n            You are playing as <cs.ColoredText bold color={this.colorForSelf}>{selfName}</cs.ColoredText>\n          </cs.ColoredText>\n          <cs.ColoredText bold>\n            Against <cs.ColoredText bold color={this.colorForOpponent}>{opponentName}</cs.ColoredText>\n          </cs.ColoredText>\n          <cs.ColoredText bold>\n            Your symbol: <cs.ColoredText bold color={this.colorForSelf}>{symbolOfSelf}</cs.ColoredText>\n          </cs.ColoredText>\n        </cs.FlexColumnDiv>\n        <cs.FlexColumnDiv Hcenter>\n          {gameStatusMessage}\n          <Board\n            gameResult={gameResult}\n            waitForOpponentMove={waitForOpponentMove}\n            boardState={boardState} \n            handlePlayerMove={this.handlePlayerMove}\n          />\n        </cs.FlexColumnDiv>\n        <s.History>\n          <s.Move>\n            <cs.BasicButton levitate onClick={() => this.goBackToMove(0, true)}>\n              Go to Game start\n            </cs.BasicButton>\n          </s.Move>\n          {\n          Array.from(history.keys()).map((moveNum) => (\n            <s.Move key={moveNum}>\n              <cs.BasicButton \n                levitate isClicked={moveInHistory===moveNum} \n                onClick={() => this.goBackToMove(moveNum, true)}\n              >\n              Go to move #{moveNum}\n              </cs.BasicButton>\n            </s.Move>\n          ))\n          }\n        </s.History>      \n      </s.Game>\n    );\n  }\n}\n\nexport default withTheme(Game);","const StandardHTMLColorNames = [\n  \"AliceBlue\",\n  \"AntiqueWhite\",\n  \"Aqua\",\n  \"Aquamarine\",\n  \"Azure\",\n  \"Beige\",\n  \"Bisque\",\n  \"BlanchedAlmond\",\n  \"Blue\",\n  \"BlueViolet\",\n  \"Brown\",\n  \"BurlyWood\",\n  \"CadetBlue\",\n  \"Chartreuse\",\n  \"Chocolate\",\n  \"Coral\",\n  \"CornflowerBlue\",\n  \"Cornsilk\",\n  \"Crimson\",\n  \"Cyan\",\n  \"DarkBlue\",\n  \"DarkCyan\",\n  \"DarkGoldenRod\",\n  \"DarkGray\",\n  \"DarkGrey\",\n  \"DarkGreen\",\n  \"DarkKhaki\",\n  \"DarkMagenta\",\n  \"DarkOliveGreen\",\n  \"DarkOrange\",\n  \"DarkOrchid\",\n  \"DarkRed\",\n  \"DarkSalmon\",\n  \"DarkSeaGreen\",\n  \"DarkSlateBlue\",\n  \"DarkSlateGray\",\n  \"DarkSlateGrey\",\n  \"DarkTurquoise\",\n  \"DarkViolet\",\n  \"DeepPink\",\n  \"DeepSkyBlue\",\n  \"DimGray\",\n  \"DimGrey\",\n  \"DodgerBlue\",\n  \"FireBrick\",\n  \"FloralWhite\",\n  \"ForestGreen\",\n  \"Fuchsia\",\n  \"Gainsboro\",\n  \"GhostWhite\",\n  \"Gold\",\n  \"GoldenRod\",\n  \"Gray\",\n  \"Grey\",\n  \"Green\",\n  \"GreenYellow\",\n  \"HoneyDew\",\n  \"HotPink\",\n  \"IndianRed \",\n  \"Indigo \",\n  \"Ivory\",\n  \"Khaki\",\n  \"Lavender\",\n  \"LavenderBlush\",\n  \"LawnGreen\",\n  \"LemonChiffon\",\n  \"LightBlue\",\n  \"LightCoral\",\n  \"LightCyan\",\n  \"LightGoldenRodYellow\",\n  \"LightGray\",\n  \"LightGrey\",\n  \"LightGreen\",\n  \"LightPink\",\n  \"LightSalmon\",\n  \"LightSeaGreen\",\n  \"LightSkyBlue\",\n  \"LightSlateGray\",\n  \"LightSlateGrey\",\n  \"LightSteelBlue\",\n  \"LightYellow\",\n  \"Lime\",\n  \"LimeGreen\",\n  \"Linen\",\n  \"Magenta\",\n  \"Maroon\",\n  \"MediumAquaMarine\",\n  \"MediumBlue\",\n  \"MediumOrchid\",\n  \"MediumPurple\",\n  \"MediumSeaGreen\",\n  \"MediumSlateBlue\",\n  \"MediumSpringGreen\",\n  \"MediumTurquoise\",\n  \"MediumVioletRed\",\n  \"MidnightBlue\",\n  \"MintCream\",\n  \"MistyRose\",\n  \"Moccasin\",\n  \"NavajoWhite\",\n  \"Navy\",\n  \"OldLace\",\n  \"Olive\",\n  \"OliveDrab\",\n  \"Orange\",\n  \"OrangeRed\",\n  \"Orchid\",\n  \"PaleGoldenRod\",\n  \"PaleGreen\",\n  \"PaleTurquoise\",\n  \"PaleVioletRed\",\n  \"PapayaWhip\",\n  \"PeachPuff\",\n  \"Peru\",\n  \"Pink\",\n  \"Plum\",\n  \"PowderBlue\",\n  \"Purple\",\n  \"RebeccaPurple\",\n  \"Red\",\n  \"RosyBrown\",\n  \"RoyalBlue\",\n  \"SaddleBrown\",\n  \"Salmon\",\n  \"SandyBrown\",\n  \"SeaGreen\",\n  \"SeaShell\",\n  \"Sienna\",\n  \"Silver\",\n  \"SkyBlue\",\n  \"SlateBlue\",\n  \"SlateGray\",\n  \"SlateGrey\",\n  \"Snow\",\n  \"SpringGreen\",\n  \"SteelBlue\",\n  \"Tan\",\n  \"Teal\",\n  \"Thistle\",\n  \"Tomato\",\n  \"Turquoise\",\n  \"Violet\",\n  \"Wheat\",\n  \"WhiteSmoke\",\n  \"Yellow\",\n  \"YellowGreen\"\n  ]\n\nconst colorNameGenerator = (function* () {\n  let i = 0\n  while (i < StandardHTMLColorNames.length){\n    yield StandardHTMLColorNames[i]\n    i += 1\n    if (i === StandardHTMLColorNames.length) {\n      i = 0\n    }\n  }\n})()\n\nconst setColor = (elementRef: React.RefObject<any>) => () => {\n  if (elementRef.current) {\n    elementRef.current.style.backgroundColor = colorNameGenerator.next().value\n  }\n}\n\nexport const ChangeColors = \n  (timeInMs: number, ...elementRefs: Array<React.RefObject<any>>) => \n    elementRefs.map(elementRef => setInterval(setColor(elementRef), timeInMs))\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(\"rect\", {\n  y: 10,\n  width: 15,\n  height: 120,\n  rx: 6\n}, React.createElement(\"animate\", {\n  attributeName: \"height\",\n  begin: \"0.5s\",\n  dur: \"1s\",\n  values: \"120;110;100;90;80;70;60;50;40;140;120\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}), React.createElement(\"animate\", {\n  attributeName: \"y\",\n  begin: \"0.5s\",\n  dur: \"1s\",\n  values: \"10;15;20;25;30;35;40;45;50;0;10\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}));\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"rect\", {\n  x: 30,\n  y: 10,\n  width: 15,\n  height: 120,\n  rx: 6\n}, React.createElement(\"animate\", {\n  attributeName: \"height\",\n  begin: \"0.25s\",\n  dur: \"1s\",\n  values: \"120;110;100;90;80;70;60;50;40;140;120\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}), React.createElement(\"animate\", {\n  attributeName: \"y\",\n  begin: \"0.25s\",\n  dur: \"1s\",\n  values: \"10;15;20;25;30;35;40;45;50;0;10\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}));\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"rect\", {\n  x: 60,\n  width: 15,\n  height: 140,\n  rx: 6\n}, React.createElement(\"animate\", {\n  attributeName: \"height\",\n  begin: \"0s\",\n  dur: \"1s\",\n  values: \"120;110;100;90;80;70;60;50;40;140;120\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}), React.createElement(\"animate\", {\n  attributeName: \"y\",\n  begin: \"0s\",\n  dur: \"1s\",\n  values: \"10;15;20;25;30;35;40;45;50;0;10\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}));\n\nvar _ref4 =\n/*#__PURE__*/\nReact.createElement(\"rect\", {\n  x: 90,\n  y: 10,\n  width: 15,\n  height: 120,\n  rx: 6\n}, React.createElement(\"animate\", {\n  attributeName: \"height\",\n  begin: \"0.25s\",\n  dur: \"1s\",\n  values: \"120;110;100;90;80;70;60;50;40;140;120\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}), React.createElement(\"animate\", {\n  attributeName: \"y\",\n  begin: \"0.25s\",\n  dur: \"1s\",\n  values: \"10;15;20;25;30;35;40;45;50;0;10\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}));\n\nvar _ref5 =\n/*#__PURE__*/\nReact.createElement(\"rect\", {\n  x: 120,\n  y: 10,\n  width: 15,\n  height: 120,\n  rx: 6\n}, React.createElement(\"animate\", {\n  attributeName: \"height\",\n  begin: \"0.5s\",\n  dur: \"1s\",\n  values: \"120;110;100;90;80;70;60;50;40;140;120\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}), React.createElement(\"animate\", {\n  attributeName: \"y\",\n  begin: \"0.5s\",\n  dur: \"1s\",\n  values: \"10;15;20;25;30;35;40;45;50;0;10\",\n  calcMode: \"linear\",\n  repeatCount: \"indefinite\"\n}));\n\nvar SvgComponent = function SvgComponent(props) {\n  return React.createElement(\"svg\", _extends({\n    width: 135,\n    height: 140,\n    viewBox: \"0 0 135 140\",\n    fill: \"white\"\n  }, props), _ref, _ref2, _ref3, _ref4, _ref5);\n};\n\nexport default __webpack_public_path__ + \"static/media/BarsLoader.9d461692.svg\";\nexport { SvgComponent as ReactComponent };","import React from 'react';\nimport * as s from './style'\nimport * as cs from '../common'\nimport io from 'socket.io-client';\nimport AvailablePlayers from './AvailablePlayers/AvailablePlayers';\nimport Chatbox from './ChatBox/Chatbox';\nimport Game from '../Game/Game';\nimport { GameMode } from '../../App';\nimport * as utils from '../../utils/util'\nimport {ReactComponent as BarsLoader} from '../../assets/BarsLoader.svg'\n\nexport interface AvailablePlayer {\n  name: string\n  socketID: string\n}\n\ninterface SocketResponse {\n  message: string\n  code: number\n}\n\ninterface AnswerSignal extends RTCSessionDescription {}\ninterface OfferSignal extends RTCSessionDescription {}\n\ninterface CandidateSignal {\n  type: 'candidate'\n  candidate: RTCIceCandidateInit\n}\n\nexport interface PeerSignal {\n  name: string\n  socketID: string\n  offer:  OfferSignal\n  candidate: CandidateSignal | null\n}\n\nexport enum TextMessageTypes {\n  IncomingTextMessage = \"IncomingTextMessage\",\n  OutgoingTextMessage = \"OutgoingTextMessage\"\n}\n\nexport interface IncomingTextMessage {\n  type: TextMessageTypes.IncomingTextMessage\n  value: string\n}\n\nexport interface OutgoingTextMessage {\n  type: TextMessageTypes.OutgoingTextMessage\n  value: string\n}\n\n// TextMessage is the type of an object that contains text messages which are sent over the WebRTC connection.\nexport type TextMessage = IncomingTextMessage | OutgoingTextMessage\n\n// PlayerMoveCellID is the type of an object that contains the player move symbol which is sent over the WebRTC connection.\nexport interface PlayerMoveCellID {\n  type: \"PlayerMoveCellID\"\n  value: number\n}\n\nexport interface RestartSignal {\n  type: \"RestartGame\"\n}\n\n// Payload is the type of an object which is sent over the WebRTC connection. The object can be of type TextMessage or PlayerMoveSymbol\nexport type Payload = TextMessage | PlayerMoveCellID | RestartSignal\n\ntype SendQueue = Array<Payload>\n\nexport type AllTextMessages = Array<TextMessage>\n\ntype RequestsFromPlayers = Map<string, PeerSignal>\n\ntype AvailablePlayers = Array<AvailablePlayer>\n\ninterface State {\n  selfName: string\n  currentOutgoingTextMessage: string\n  placeholderForPlayerNameEle: string\n  allTextMessages: AllTextMessages\n  availablePlayers: AvailablePlayers\n  requestsFromPlayers: RequestsFromPlayers\n  isInAvailablePlayersRoom: boolean\n}\n\ninterface Props {\n  showPopUp: (popUpValue: any) => void\n}\n\n\nclass Multiplayer extends React.Component<Props, State> {\n\n  basicButtonRef = React.createRef<any>()\n  nameInputRef = React.createRef<any>()\n  multiPlayerRef = React.createRef<any>()\n  gameComponentChild = React.createRef<any>()\n  defaultPlaceholder = \"Enter player name\"\n  onErrorPlaceholder = \"Name cannot be empty\"\n  opponentName =  \"\"\n  isInitiator = false \n  sendQueue: SendQueue = []\n  socket: SocketIOClient.Socket // Not initializing this member beacuse it doesnt need to be initialized.\n  peerConn: RTCPeerConnection\n  webRTCConfig: RTCConfiguration\n  dataChannel: RTCDataChannel | null = null\n  selectedAvailablePlayer: AvailablePlayer | null = null\n  socketServerAddress: string\n  setIntervalIds: Array<NodeJS.Timeout> \n\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      selfName: \"\", currentOutgoingTextMessage: \"\", placeholderForPlayerNameEle: this.defaultPlaceholder, allTextMessages: [],\n      availablePlayers: [], requestsFromPlayers: new Map(), isInAvailablePlayersRoom: false\n    }\n\n    if (process.env.NODE_ENV === \"development\") {\n      this.socketServerAddress = process.env.REACT_APP_DEV_SOCKET_SERVER_ADDRESS as string\n    } else {\n      this.socketServerAddress = process.env.REACT_APP_PROD_SOCKET_SERVER_ADDRESS as string\n    }\n    console.log(\"Using socketServerAddress: \", this.socketServerAddress)\n  }\n\n  handleInputChange : React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const {name, value} = event.currentTarget\n    switch (name) {\n      case \"playerName\":\n        this.setState({selfName: value})\n        break\n    \n      case \"currentOutgoingMessage\":\n        this.setState({currentOutgoingTextMessage: value})\n        break\n    }\n  }\n\n  handleEnter : React.KeyboardEventHandler<HTMLInputElement> = (event) => {\n    const {name} = event.currentTarget\n    if (event.key === \"Enter\") {\n      switch (name) {\n        case \"currentOutgoingMessage\":\n          const outgoingTextMessage: OutgoingTextMessage = {\n            type: TextMessageTypes.OutgoingTextMessage, \n            value: this.state.currentOutgoingTextMessage\n          }\n          this.sendDataToRemotePeer(outgoingTextMessage)\n          break;\n      \n        case \"playerName\":\n          this.handleJoinRoomClick()\n          break;\n      }\n    }\n  }\n\n  handleSendTextMessageButton : React.MouseEventHandler<HTMLButtonElement> = () => {\n    const outgoingTextMessage: OutgoingTextMessage = {\n      type: TextMessageTypes.OutgoingTextMessage, \n      value: this.state.currentOutgoingTextMessage\n    }\n    this.sendDataToRemotePeer(outgoingTextMessage)\n  }\n\n  handleJoinRoomClick = () => {\n    if (this.state.selfName === \"\") {\n      this.setState({placeholderForPlayerNameEle: this.onErrorPlaceholder})\n      return\n    }\n\n    this.socket = io(this.socketServerAddress, {\n      path: '/xoxo-multiplayer-socketConnectionNamespace'\n    })\n\n    this.socket.on('connect', () => {\n\n      console.log(\"Client socket is connected ?: \", this.socket.connected); // true\n      \n      this.registerToSocketEvents()\n      \n      this.socket.emit(\"registerNameWithSocket\", this.state.selfName, (response: SocketResponse) => {\n        console.log(response)\n        \n        this.socket.emit('joinAvailablePlayersRoom', (resp: SocketResponse) => {\n          if (resp.code !== 200) {\n            this.props.showPopUp(new Error(resp.message))\n            return\n          }\n          console.log(resp)\n          this.setState({isInAvailablePlayersRoom: true})\n        });\n        \n        // window.onunload = function(playerName) {\n        //   this.dataChannel.close()\n        //   this.socket.close()\n        // }.bind(this, this.state.playerName)\n      })\n      \n      if (window.location.hostname.match(/localhost|127\\.0\\.0/)) {\n        this.socket.emit('ipaddr');\n      }\n    });\n  }\n  \n\n  registerToSocketEvents = () => {\n\n    this.socket.on('playersInAvailableRoom', (availablePlayers: []) => {\n      console.log(\"Got playersInAvailableRoom : \", availablePlayers)\n      this.setState({availablePlayers})\n    })\n\n    this.socket.on('rejectionFromRequestedPlayer', (playerThatRejected: string) => {\n      console.log(`${playerThatRejected} rejected the request to play`)\n      this.peerConn.close()\n      this.dataChannel!.close()\n    })\n\n    this.socket.on('ipaddr', (ipaddr: string) => {\n      console.log('Server IP address is: ' + ipaddr);\n    });\n    \n    this.socket.on('log', (msg: object) => console.log(msg))\n    \n    this.socket.on('offerFromRemotePlayer', (offer: OfferSignal, remotePlayerName: string, remotePlayerSocketID: string) => {\n      console.log(`${remotePlayerName} has sent a offer ${JSON.stringify(offer)}`)\n      const peerSignal: PeerSignal = {name: remotePlayerName, socketID: remotePlayerSocketID, offer: offer, candidate: null}\n      this.setState((prevState) => ({\n        requestsFromPlayers: new Map(prevState.requestsFromPlayers).set(remotePlayerSocketID, peerSignal)\n      }))\n    });\n\n    this.socket.on('candidateFromRemotePlayer', (candidate: CandidateSignal, remotePlayerName: string, remotePlayerSocketID: string) => {\n      console.log(`${remotePlayerName} (${remotePlayerSocketID}) has sent an ICE candidate ${JSON.stringify(candidate)}`)\n      if (this.isInitiator) {\n        this.processSignalFromRemotePeer(candidate)\n        return\n      }\n      this.setState((prevState) => {\n        const requestsFromPlayers = new Map(prevState.requestsFromPlayers)\n        const signal = requestsFromPlayers.get(remotePlayerSocketID) as PeerSignal\n        signal.candidate = candidate\n        requestsFromPlayers.set(remotePlayerSocketID, signal)\n        return {requestsFromPlayers}\n      })\n    });\n\n    this.socket.on('answerFromRemotePlayer', (answer: AnswerSignal, remotePlayerName: string, remotePlayerSocketID: string) => {\n      console.log(`${remotePlayerName} (${remotePlayerSocketID}) has sent an answer ${JSON.stringify(answer)}`)\n      this.processSignalFromRemotePeer(answer)\n    });\n\n    this.socket.on('disconnect', (reason: string) => {\n      console.log(`Disconnected from signaling Node server: ${reason}.`);\n      // this.setState({canSendMessages: false})\n    });\n  }\n\n  sendOfferToRemotePeerViaSignallingServer = (offer: OfferSignal) => {\n    console.log(`${this.state.selfName} sending an offer to remote player ${this.selectedAvailablePlayer!.name}: ${offer}`);\n    this.socket.emit('signalOfferToRemotePlayer', offer, this.selectedAvailablePlayer!.socketID);\n  }\n\n  sendCandidateToRemotePeerViaSignallingServer = (candidate: CandidateSignal) => {\n    console.log(`${this.state.selfName} sending a candidate message to remote player ${this.selectedAvailablePlayer!.name}: ${candidate}`);\n    this.socket.emit('signalCandidateToRemotePlayer', candidate, this.selectedAvailablePlayer!.socketID);\n  }\n\n  sendAnswerToRemotePeerViaSignallingServer = (answer: AnswerSignal) => {\n    console.log(`${this.state.selfName} sending a answer to remote player ${this.selectedAvailablePlayer!.name}: ${answer}`);\n    this.socket.emit('signalAnswerToRemotePlayer', answer, this.selectedAvailablePlayer!.socketID);\n  }\n\n\n  processSignalFromRemotePeer = async(signal: OfferSignal | AnswerSignal | CandidateSignal) => {\n    switch (signal.type) {\n      case 'offer':\n        console.log('Got offer');\n        try {\n          const callerSessionDescription = new RTCSessionDescription(signal) // represents the caller's session description.\n          await this.peerConn.setRemoteDescription(callerSessionDescription) // This establishes the received offer as the description of the remote (caller's) end of the connection.\n          const localSessionDesc = await this.peerConn.createAnswer()\n          await this.peerConn.setLocalDescription(localSessionDesc) // Set's description of the local end of the connection\n          this.sendAnswerToRemotePeerViaSignallingServer(this.peerConn.localDescription as AnswerSignal)\n        } catch(err) {\n          this.props.showPopUp(err)\n        }\n        break;\n    \n      case 'answer':\n        console.log('Got answer.');\n        try {\n          const calleeSessionDescription = new RTCSessionDescription(signal)\n          await this.peerConn.setRemoteDescription(calleeSessionDescription);\n        } catch(err) {\n          this.props.showPopUp(err)\n        }\n        break;\n\n      case 'candidate':\n        console.log('Got ice candidate');\n        try {\n          const iceCandidate = new RTCIceCandidate(signal.candidate)\n          await this.peerConn.addIceCandidate(iceCandidate)\n        } catch(err) {\n          this.props.showPopUp(err)\n        }\n        break;\n      \n      default:\n        this.props.showPopUp(new Error(\"Got unexpected signal from remote peer.\"))\n        break;\n    }\n  }\n\n  /*\n  The local ICE layer calls your icecandidate event handler, when it needs you to transmit an ICE candidate to the \n  other peer, through your signaling server. \n  */\n  handleICECandidateEvent = (event: RTCPeerConnectionIceEvent) => {\n    console.log('icecandidate event:', event);\n    const iceCandidate = event.candidate\n    if (iceCandidate) {\n      const candidateSignal: CandidateSignal = {type: \"candidate\", candidate: iceCandidate.toJSON()}\n      this.sendCandidateToRemotePeerViaSignallingServer(candidateSignal)\n    } else {\n      console.log('End of candidates.');\n    }\n  }\n\n  /*\n  This function is called whenever the WebRTC infrastructure needs you to start the session negotiation process anew.\n  Its job is to create and send an offer, to the callee, asking it to connect with us.\n  */\n  handleNegotiationNeededEvent = async () => {\n    try {\n      console.log('Creating an offer');\n      const localSessionDescription = await this.peerConn.createOffer()\n      await this.peerConn.setLocalDescription(localSessionDescription)\n      // We know the description is valid, and has been set, when the promise returned by setLocalDescription() is fulfilled.\n      this.sendOfferToRemotePeerViaSignallingServer(this.peerConn.localDescription as RTCSessionDescription)\n    } catch(err) {\n      this.props.showPopUp(err)\n    }\n  }\n\n  /*\n  The createPeerConnection() function is used by both the caller and the callee to construct their \n  RTCPeerConnection objects, their respective ends of the WebRTC connection.\n  */\n  createPeerConnection = (isInitiator: boolean, config?: RTCConfiguration) => {\n    console.log('Creating Peer connection as initiator?', isInitiator, 'config:', config);\n    this.peerConn = new RTCPeerConnection(config);\n  \n    // send any ice candidates to the other peer\n    this.peerConn.onicecandidate = this.handleICECandidateEvent\n  \n    if (isInitiator) {\n      this.peerConn.onnegotiationneeded = this.handleNegotiationNeededEvent\n      console.log('Creating Data Channel')\n      this.dataChannel = this.peerConn.createDataChannel('textMessages')\n      this.onDataChannelCreated(this.dataChannel)\n      this.forceUpdate()\n    } else {\n      console.log(\"Registering ondatachannel handler\")\n      // registering a handler that fires when the peer gets a datachannel from the other remote peer.\n      this.peerConn.ondatachannel = (event) => {\n        console.log('Got data channel from remote peer : ', event.channel);\n        this.dataChannel = event.channel;\n        this.onDataChannelCreated(this.dataChannel);\n      };\n    }\n  }\n\n  onDataChannelCreated = (channel: RTCDataChannel) => {\n    console.log('onDataChannelCreated:', channel);\n  \n    channel.onopen = () => {\n      console.log('Data channel opened!!!');\n      this.socket = this.socket as SocketIOClient.Socket\n      this.socket.emit(\"exitFromAvailablePlayersRoom\", (resp: SocketResponse) => {\n        if (resp.code !== 200) {\n          this.props.showPopUp(new Error(resp.message))\n          return\n        }\n        console.log(resp)\n        this.setState({isInAvailablePlayersRoom: false, availablePlayers: [], requestsFromPlayers: new Map()})\n      })\n    };\n\n    channel.onerror = (err) => {\n      console.log(\"Data channel error\", err)\n    }\n  \n    channel.onclose = () => {\n      console.log('Data channel closed.');\n      if (this.state.isInAvailablePlayersRoom) {\n        // This block is executed when the player's request is rejected\n        this.forceUpdate()\n        return\n      }\n      // The below code is executed when the player quits the match to join avaiable players pool.\n      this.socket = this.socket as SocketIOClient.Socket\n      this.socket.emit('joinAvailablePlayersRoom', (resp: SocketResponse) => {\n        if (resp.code !== 200) {\n          this.props.showPopUp(new Error(resp.message))\n          return\n        }\n        console.log(resp)\n        this.setState({allTextMessages: [], isInAvailablePlayersRoom: true})\n        this.selectedAvailablePlayer = null\n        this.dataChannel = null\n      });\n    }\n  \n    channel.onmessage = (evt: MessageEvent) => {\n      console.log(\"Got payload from data channel!!!\")\n      const payload: Payload = JSON.parse(evt.data)\n      switch (payload.type) {\n        case \"PlayerMoveCellID\":\n          console.log(\"got PlayerMoveCellID: \", payload.value)\n          // make handlePlayerMove execute in Game component which is a child of this component.\n          // so make a method in child comp execute from the parent comp.\n          // Using a reference to the child comp and trigerring the method.\n          this.gameComponentChild.current!.handlePlayerMove(payload.value, false)\n          break;\n\n        case \"RestartGame\":\n          console.log(\"Got restart game signal: \", payload)\n          this.props.showPopUp(`Game has been restarted by ${this.selectedAvailablePlayer!.name}`)\n          this.gameComponentChild.current!.goBackToMove(0, false)\n          break;\n\n        case TextMessageTypes.IncomingTextMessage:\n          this.setState((prevState) => ({\n            allTextMessages: prevState.allTextMessages.concat(payload)\n          }))\n          break;\n      \n        default:\n          break;\n      }\n    }\n  }\n\n  invitePlayer = () => {\n    this.isInitiator = true\n    this.createPeerConnection(this.isInitiator);\n  }\n\n  handleAvailablePlayerClick = (availablePlayer: AvailablePlayer) => {\n    this.selectedAvailablePlayer = availablePlayer\n    console.log(this.selectedAvailablePlayer)\n    this.invitePlayer()\n  }\n\n  sendRejectionResponseToPeers = (peersToReject: Array<string>) => {\n    this.socket.emit(\"sendRejectionResponseToPeers\", peersToReject, (resp: SocketResponse) => {\n      if (resp.code !== 200) {\n        this.props.showPopUp(new Error(resp.message))\n      }\n      console.log(resp.message)\n    })\n  }\n\n  acceptPeerRequest = (selectedPeerSocketID: string) => {\n    const peerSignal = this.state.requestsFromPlayers.get(selectedPeerSocketID) as PeerSignal\n    const peersToReject = Array.from(this.state.requestsFromPlayers.keys()).filter((socketID) => socketID !== selectedPeerSocketID)\n    this.sendRejectionResponseToPeers(peersToReject)\n    this.selectedAvailablePlayer = {name: peerSignal.name, socketID: peerSignal.socketID}\n    this.isInitiator = false\n    this.createPeerConnection(this.isInitiator); // because this client needs to also open RTCPeerConnection to receive the data channel.\n    this.processSignalFromRemotePeer(peerSignal.offer)\n    this.processSignalFromRemotePeer(peerSignal.candidate as CandidateSignal)\n  }\n\n  sendDataToRemotePeer = (payload: Payload) => {\n    switch(this.dataChannel!.readyState) {\n      case \"connecting\":\n        console.log(\"Connection not open; queueing: \" + payload);\n        this.sendQueue.push(payload);\n        break;\n      case \"open\":\n        console.log(\"Sending data: \", payload)\n        this.sendQueue.push(payload);\n        while (this.sendQueue.length) {\n          this.dataChannel!.send(JSON.stringify(this.sendQueue.shift()))\n        }\n        if (payload.type === TextMessageTypes.OutgoingTextMessage) {\n          this.setState((prevState) => ({\n            currentOutgoingTextMessage: \"\",\n            allTextMessages: prevState.allTextMessages.concat(payload)\n          }))\n        }\n        break;\n      case \"closing\":\n        console.log(\"Attempted to send message while closing: \" + payload);\n        break;\n      case \"closed\":\n        console.log(\"Error! Attempt to send while connection closed.\");\n        break;\n      default:\n        console.log(\"should not happen\")\n        break;\n    }\n  }\n\n  sendPlayerMoveCellIDToOpponent = (cellID: number) => {\n    const playerMoveCellID: PlayerMoveCellID = {type: \"PlayerMoveCellID\", value: cellID}\n    this.sendDataToRemotePeer(playerMoveCellID)\n  }\n\n  sendRestartSignalToOpponent = () => {\n    const restartSignal: RestartSignal = {type: \"RestartGame\"}\n    this.sendDataToRemotePeer(restartSignal)\n  }\n\n  handleQuitMatchAndGoBackToAvailablePool = () => {\n    this.dataChannel!.close()\n  }\n\n  showViewBasedOnDataChannelState = () => {\n    if (this.dataChannel === null) {\n      return\n    }\n\n    const {readyState} = this.dataChannel\n\n    switch (readyState) {\n      case \"closed\":\n        if (this.state.isInAvailablePlayersRoom) {\n          return (\n            <cs.ColoredText>\n              <cs.ColoredText color=\"red\">{this.selectedAvailablePlayer!.name}</cs.ColoredText> has <cs.ColoredText color=\"red\">REJECTED</cs.ColoredText> your request to play. Choose another player.\n            </cs.ColoredText>\n          )\n        }\n        break;  \n  \n\n      case \"connecting\":\n        return (\n          <cs.FlexColumnDiv Hcenter>\n            <BarsLoader width=\"100\" height=\"100\" fill=\"white\"/>\n            <cs.ColoredText bold>Waiting to hear back from <cs.ColoredText bold color=\"blue\">{this.selectedAvailablePlayer!.name}</cs.ColoredText> </cs.ColoredText>\n          </cs.FlexColumnDiv>\n        )\n\n      default:\n        break;\n    }\n  }\n\n  showGameAndChat = () => {\n    return (\n      <React.Fragment>\n        <Game\n          gameMode={GameMode.MultiPlayer}\n          ref={this.gameComponentChild}\n          sendPlayerMoveCellIDToOpponent={this.sendPlayerMoveCellIDToOpponent}\n          sendRestartSignalToOpponent={this.sendRestartSignalToOpponent}\n          selfName={this.state.selfName}\n          opponentName={this.selectedAvailablePlayer!.name}\n          isSelfPlayer1={this.isInitiator}\n        />\n        <cs.ColoredText bold>\n          Quit match and join the available pool again? <cs.BasicButton \n            onClick={this.handleQuitMatchAndGoBackToAvailablePool}>Yes</cs.BasicButton>\n        </cs.ColoredText>\n        {/* <Chatbox\n          allTextMessages={allTextMessages} \n          handleEnter={this.handleEnter}\n          handleSendTextMessageButton={this.handleSendTextMessageButton}\n          currentOutgoingMessage={currentOutgoingTextMessage}\n          handleInputChange={this.handleInputChange}\n        /> */}\n      </React.Fragment>\n    )\n  }\n\n  showAvailablePlayers = () => {\n    const {availablePlayers} = this.state\n    if (availablePlayers.length === 0) {\n      return null\n    }\n    const availablePlayersExceptSelf = availablePlayers.filter((player) => player.socketID !== this.socket.id)\n    return (\n      <AvailablePlayers \n        handleAvailablePlayerClick={this.handleAvailablePlayerClick} \n        availablePlayers={availablePlayersExceptSelf}\n        selectedAvailablePlayer={this.selectedAvailablePlayer} \n      />\n    )\n  }\n\n  showRequestsFromPlayers = () => {\n    const {requestsFromPlayers} = this.state\n    if (requestsFromPlayers.size === 0) {\n      return\n    }\n\n    console.log(\"Got requests!!: \", requestsFromPlayers)\n    return (\n      <cs.FlexColumnContainer>\n        {\n          Array.from(requestsFromPlayers.values()).map((peerSignal) => {\n            if (peerSignal.candidate === null) {\n              return null\n            }\n            return (\n              <cs.FlexRowDiv key={peerSignal.socketID}>\n                <cs.ColoredText>Got request from <cs.ColoredText bold color=\"red\">{peerSignal.name}</cs.ColoredText></cs.ColoredText>\n                <cs.BasicButton levitate onClick={() => this.acceptPeerRequest(peerSignal.socketID)}>Accept</cs.BasicButton>\n              </cs.FlexRowDiv>\n            )\n          })\n        }\n      </cs.FlexColumnContainer>\n    )\n  }\n\n  componentDidMount() {\n    this.setIntervalIds = utils.ChangeColors(1000, this.multiPlayerRef, this.nameInputRef, this.basicButtonRef)\n  }\n\n  componentWillUnmount() {\n    console.log(\"clearing the setIntervals \", this.setIntervalIds)\n    this.setIntervalIds.forEach(intervalID => clearInterval(intervalID))\n  }\n\n  render() {\n    console.log(\"state in render: \", this.state)\n    const {selfName, placeholderForPlayerNameEle, isInAvailablePlayersRoom}= this.state\n    const showJoiningForm = isInAvailablePlayersRoom === false && this.dataChannel === null ? true : false\n    const isConnectedWithOpponent = this.dataChannel !== null && this.dataChannel.readyState === \"open\"\n    console.log(\"showJoiningForm: \", showJoiningForm)\n    return (\n      <s.MultiPlayer ref={this.multiPlayerRef}>\n        {\n        showJoiningForm\n        ?\n        <s.JoiningForm>\n          <s.NameInput \n            ref={this.nameInputRef} name=\"playerName\" autoFocus placeholder={placeholderForPlayerNameEle} \n            onKeyUp={this.handleEnter} onChange={this.handleInputChange} value={selfName} \n          />\n          <cs.BasicButton \n            transitionProp=\"background-color\" ref={this.basicButtonRef} \n            levitate onClick={this.handleJoinRoomClick}\n          >\n          Join room\n          </cs.BasicButton>\n        </s.JoiningForm>\n        :\n        <s.MultiPlayerWrapper>\n          {\n          isConnectedWithOpponent ? this.showGameAndChat() :\n          <React.Fragment>\n            <s.AvailablePlayersAndRequestsContainer>\n              <cs.FlexColumnDiv Hcenter>\n                <cs.ColoredText bold>\n                  You are playing as <cs.ColoredText bold color=\"red\">{selfName}</cs.ColoredText>\n                </cs.ColoredText>\n                {this.showAvailablePlayers()}\n              </cs.FlexColumnDiv>\n              {this.showRequestsFromPlayers()}\n            </s.AvailablePlayersAndRequestsContainer>\n            {this.showViewBasedOnDataChannelState()}\n          </React.Fragment>\n          }\n        </s.MultiPlayerWrapper>\n        }\n      </s.MultiPlayer>\n    );\n  }\n}\n\nexport default Multiplayer;","import React from 'react';\nimport * as s from './AppStyle'\nimport Multiplayer from './components/Multiplayer/Multiplayer';\nimport StartScreen from './components/StartScreen/StartScreen';\nimport Game from './components/Game/Game';\nimport { ThemeProvider, css } from \"./styled-components\";\nimport * as cs from './components/common'\n\n// GameMode is a union of SinglePlayer and MultiPlayer type\nexport enum GameMode {\n  SinglePlayer = \"SinglePlayer\", // The enum member SinglePlayer can be used as a type, and the only value of that type is the string \"SinglePlayer\"\n  MultiPlayer = \"MultiPlayer\"\n}\ninterface State {\n  popUpValue: any,\n  gameMode: GameMode | null\n}\n\nclass App extends React.Component<{}, State> {\n  constructor() {\n    super({});\n    this.state = {\n      popUpValue: null, gameMode: null\n    }\n  }\n\n  showPopUp = (popUpValue: any) => this.setState({popUpValue})\n\n  closePopUp = () => this.setState({popUpValue: null})\n\n  gameModeSelectionButtonHandler = (mode: GameMode) => this.setState({gameMode: mode})\n\n  showViewBasedOnGameMode = (gameMode: GameMode | null) => { // GameMode is a union of SinglePlayer and MultiPlayer type\n    switch (gameMode) {\n      case GameMode.SinglePlayer: // Here, the enum member is used as value\n        return (\n          <Game gameMode={GameMode.SinglePlayer} opponentName=\"Vegana\" selfName=\"Bob\" isSelfPlayer1 />\n        )\n\n      case GameMode.MultiPlayer:\n        return (\n          <Multiplayer showPopUp={this.showPopUp}  />\n        )\n\n      case null:\n        return (\n          <StartScreen gameModeSelectionButtonHandler={this.gameModeSelectionButtonHandler} />\n        )\n    \n      default:\n        break;\n    }\n  }\n\n  popUpView = () => {\n    const {popUpValue} = this.state\n    return (\n      <s.PopUpContainer>\n        <s.PopUp>\n          <s.CloseButton onClick={this.closePopUp}>X</s.CloseButton>\n          <cs.ColoredText color=\"white\">{popUpValue}</cs.ColoredText>\n        </s.PopUp>\n      </s.PopUpContainer>\n    )\n  }\n\n  render() {\n    const {popUpValue, gameMode} = this.state\n    return (\n      <ThemeProvider theme={s.Theme}>\n        <React.Fragment>\n          <s.GlobalStyle />\n          <s.AppWrapper>\n            {popUpValue && this.popUpView()}\n            {this.showViewBasedOnGameMode(gameMode)}\n          </s.AppWrapper>\n        </React.Fragment>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default (App);","import React, { Component } from 'react'\nimport * as cs from '../common'\nimport { GameMode } from '../../App';\nimport * as utils from '../../utils/util'\n\ninterface Props {\n  gameModeSelectionButtonHandler: (mode: GameMode) => void\n}\n\nexport default class StartScreen extends Component<Props> {\n\n  centeringDivRef = React.createRef<any>()\n  basicButtonARef = React.createRef<any>()\n  basicButtonBRef = React.createRef<any>()\n  setIntervalIds: Array<NodeJS.Timeout>\n\n  componentDidMount() {\n    this.setIntervalIds = utils.ChangeColors(1000, this.centeringDivRef, this.basicButtonARef, this.basicButtonBRef)\n  }\n\n  componentWillUnmount() {\n    console.log(\"clearing the setIntervals \", this.setIntervalIds)\n    this.setIntervalIds.forEach(intervalID => clearInterval(intervalID))\n  }\n\n  render() {\n    const {gameModeSelectionButtonHandler} = this.props\n    return (\n      <cs.CenteringDiv fitContainer ref={this.centeringDivRef} transitionProp=\"background-color\">\n        <cs.FlexColumnDiv height=\"40%\" cssStyle = {`justify-content: space-evenly;`}>\n          <cs.BasicButton \n            ref={this.basicButtonARef} transitionProp=\"background-color\"\n            onClick={() => gameModeSelectionButtonHandler(GameMode.SinglePlayer)} \n            levitate\n          >\n          Single Player\n          </cs.BasicButton>\n\n          <cs.BasicButton \n            ref={this.basicButtonBRef} transitionProp=\"background-color\"\n            onClick={() => gameModeSelectionButtonHandler(GameMode.MultiPlayer)} \n            levitate\n          >\n          Multi Player\n          </cs.BasicButton>\n        </cs.FlexColumnDiv>\n      </cs.CenteringDiv>\n    )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />, \n  document.getElementById(\"root\") as HTMLElement\n)\n"],"sourceRoot":""}